#Chapter-03-04-LAB_Managing Containers
#LAB: MANAGING CONTAINERS
1. Create the /var/local/mysql directory with the correct permission.
	1.1. Create the host folder to store the MySQL database data.
		$ mkdir /var/local/mysql
		
	1.2. Apply the appropriate SELinux context to the host folder.
		$ chcon -R -t svirt_sandbox_file_t /var/local/mysql
		
	1.3. Change the owner of the host folder to the mysql user (uid=27) and mysql group (gid= 27).
		$ chown -R 27:27 /var/local/mysql

2. Deploy a MySQL container instance using the following characteristics:
	• Name: mysql-1
	• Run as daemon: yes
	• Volume: from /var/local/mysql host folder to /var/lib/mysql/data containerfolder
	• Container image: rhscl/mysql-57-rhel7
	• Port forward: no
	• Environment variables:
	• MYSQL_USER: user1
	• MYSQL_PASSWORD: mypa55
	• MYSQL_DATABASE: items
	• MYSQL_ROOT_PASSWORD: r00tpa55
	
	2.1. Create and start the container.
		$ docker run -d --name=mysql-1 -v /var/local/mysql:/var/lib/mysql/data -e MYSQL_USER=user1 -e MYSQL_PASSWORD=mypa55 -e MYSQL_DATABASE=items -e MYSQL_ROOT_PASSWORD=r00tpa55 rhscl/mysql-57-rhel7

	2.2. Verify that the container was started correctly.
		$ docker ps

3. Load the items database using the /home/student/DO285/labs/work-containers/db.sql script.
	3.1. Get the container IP.
		$ docker inspect -f "{{ .NetworkSettings.IPAddress }}" mysql-1
		
	3.2. Load the database.
		$ mysql -uuser1 -h 172.17.0.2 -pmypa55 items < /home/student/DO285/labs/work-containers/db.sql

	3.3. Verify that the database was loaded.
		$ mysql -uuser1 -h 172.17.0.2 -pmypa55 items -e "select * from people"

4. Stop the container gracefully.
	$ docker stop mysql-1

5. Create a new container with the following characteristics:
	• Name: mysql-2
	• Run as a daemon: yes
	• Volume: from /var/local/mysql host folder to /var/lib/mysql/data container folder
	• Container image: rhscl/mysql-57-rhel7
	• Port forward: yes, from host port 13306 to container port 3306
	• Environment variables:
	• MYSQL_USER: user1
	• MYSQL_PASSWORD: mypa55
	• MYSQL_DATABASE: items
	• MYSQL_ROOT_PASSWORD: r00tpa55
	
	5.1. Create and start the container.
		$ docker run -d --name=mysql-2 -p 13306:3306 -v /var/local/mysql:/var/lib/mysql/data -e MYSQL_USER=user1 -e MYSQL_PASSWORD=mypa55 -e MYSQL_DATABASE=items -e MYSQL_ROOT_PASSWORD=r00tpa55 rhscl/mysql-57-rhel7

	5.2. Verify that the container was started correctly.
		$ docker ps

6. Save the list of all containers (including stopped ones) to the /tmp/my-containers file.
	$ docker ps -a > /tmp/my-containers

7. Access the bash shell inside the container and verify that the items database and the Item table are still available. Confirm also that the table contains data.
	7.1. Access the bash shell inside the container.
		$ docker exec -it mysql-2 /bin/bash

	7.2. Connect to the MySQL server.
		$ mysql -uroot

	7.3. List all databases and confirm that the items database is available.
		$ show databases;

	7.4. List all tables from the items database and verify that the Item table is available.
		$ use items;
		$ show tables;

	7.5. View the data from the table.
		$ select * from people;

	7.6. Exit from the MySQL client and from the container shell.
		$ exit

8. Using the port forward, insert a new Finished lab row in the Item table.
	8.1. Connect to the MySQL database.
		$ mysql -uuser1 -h localhost -pmypa55 -P13306 items

	8.2. Insert the new Finished lab row.
		$ insert into Item (description, done) values ('Finished lab', 1);
	
	8.3. Exit from the MySQL client.
		$ exit
		
9. cleanup
	$ docker rm mysql-1
	$ docker stop mysql-2
	$ docker rm mysql-2
	$ rm -rf /var/local/mysql